// -----------------------------
// DECLARACIÓN DE SEMÁFOROS
// -----------------------------

semaphore comedor = 50;           // Controla el aforo máximo del comedor (50 soldados simultáneamente)
semaphore mostradores_comida = 5; // Solo 5 soldados pueden servirse comida al mismo tiempo
semaphore abridores = 50;         // Hay 50 abridores disponibles para abrir refrescos
semaphore postre = 3;             // Solo hay 3 postres disponibles a la vez
semaphore mutex = 1;              // Semáforo para exclusión mutua en variables críticas
semaphore impresion = 1;          // Semáforo para controlar la impresión sin intercalado

// -----------------------------
// VARIABLES GLOBALES
// -----------------------------

int total_abridores = 0;   // Cuenta total de veces que se usaron abridores
int total_postres = 0;     // Cuenta total de postres tomados
int soldados_dentro = 0;   // Número actual de soldados dentro del comedor

// -----------------------------
// FUNCIÓN PRINCIPAL DE SOLDADO
// -----------------------------

void soldado(int id) {
  int bebida;

  wait(comedor);  // Espera si el comedor está lleno

  wait(mutex);
  soldados_dentro++;  // Incrementa el contador de soldados dentro
  signal(mutex);

  wait(impresion);
  cout << "Soldado " << id << " entra al comedor (actual: " << soldados_dentro << ")\n";
  signal(impresion);

  wait(mostradores_comida);  // Espera turno para servirse comida

  bebida = random(2);  // 0 = agua, 1 = refresco

  if (bebida == 1) {
    wait(impresion);
    cout << "Soldado " << id << " elige bandeja con refresco (requiere abridor)\n";
    signal(impresion);

    wait(abridores);  // Toma un abridor

    wait(impresion);
    cout << "Soldado " << id << " usa un abridor para abrir su bebida\n";
    signal(impresion);

    wait(mutex);
    total_abridores++;  // Registro estadístico
    signal(mutex);

    signal(abridores);  // Libera el abridor
  } else {
    wait(impresion);
    cout << "Soldado " << id << " elige bandeja con agua (no requiere abridor)\n";
    signal(impresion);
  }

  signal(mostradores_comida);  // Libera mostrador

  // Decisión aleatoria para tomar postre
  if (random(2) == 1) {
    wait(postre);  // Espera por un postre disponible

    wait(impresion);
    cout << "Soldado " << id << " toma postre\n";
    signal(impresion);

    wait(mutex);
    total_postres++;  // Registro estadístico
    signal(mutex);

    signal(postre);  // Libera el postre
  }

  wait(impresion);
  cout << "Soldado " << id << " termina y sale\n";
  signal(impresion);

  wait(mutex);
  soldados_dentro--;  // Decrementa el contador de soldados dentro
  signal(mutex);

  signal(comedor);  // Libera un cupo en el comedor
}

// -----------------------------
// FUNCIÓN PRINCIPAL MAIN
// -----------------------------

void main() {
  int i = 1;

  // Lanza soldados de 100 en 100, hasta llegar a 500
  while (i <= 500) {
    cobegin {
      soldado(i);     soldado(i+1);   soldado(i+2);   soldado(i+3);   soldado(i+4);
      soldado(i+5);   soldado(i+6);   soldado(i+7);   soldado(i+8);   soldado(i+9);
      soldado(i+10);  soldado(i+11);  soldado(i+12);  soldado(i+13);  soldado(i+14);
      soldado(i+15);  soldado(i+16);  soldado(i+17);  soldado(i+18);  soldado(i+19);
      soldado(i+20);  soldado(i+21);  soldado(i+22);  soldado(i+23);  soldado(i+24);
      soldado(i+25);  soldado(i+26);  soldado(i+27);  soldado(i+28);  soldado(i+29);
      soldado(i+30);  soldado(i+31);  soldado(i+32);  soldado(i+33);  soldado(i+34);
      soldado(i+35);  soldado(i+36);  soldado(i+37);  soldado(i+38);  soldado(i+39);
      soldado(i+40);  soldado(i+41);  soldado(i+42);  soldado(i+43);  soldado(i+44);
      soldado(i+45);  soldado(i+46);  soldado(i+47);  soldado(i+48);  soldado(i+49);
      soldado(i+50);  soldado(i+51);  soldado(i+52);  soldado(i+53);  soldado(i+54);
      soldado(i+55);  soldado(i+56);  soldado(i+57);  soldado(i+58);  soldado(i+59);
      soldado(i+60);  soldado(i+61);  soldado(i+62);  soldado(i+63);  soldado(i+64);
      soldado(i+65);  soldado(i+66);  soldado(i+67);  soldado(i+68);  soldado(i+69);
      soldado(i+70);  soldado(i+71);  soldado(i+72);  soldado(i+73);  soldado(i+74);
      soldado(i+75);  soldado(i+76);  soldado(i+77);  soldado(i+78);  soldado(i+79);
      soldado(i+80);  soldado(i+81);  soldado(i+82);  soldado(i+83);  soldado(i+84);
      soldado(i+85);  soldado(i+86);  soldado(i+87);  soldado(i+88);  soldado(i+89);
      soldado(i+90);  soldado(i+91);  soldado(i+92);  soldado(i+93);  soldado(i+94);
      soldado(i+95);  soldado(i+96);  soldado(i+97);  soldado(i+98);  soldado(i+99);
    }

    i = i + 100;  // Incrementa el índice en 100
  }
}

